<!DOCTYPE html>
<html lang="pt-br">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Jogo Corrida com Obstáculos</title>
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html, body {
    height: 100%;
    background: linear-gradient(to top, #a0c9ff, #ffffff);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    user-select: none;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  #game-container {
    position: relative;
    width: 350px;
    height: 600px;
    background: linear-gradient(to top, #8FCB9B 0%, #6AB47B 100%);
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.25);
    overflow: hidden;
  }

  #track {
    position: absolute;
    bottom: 120px;
    left: 0;
    width: 100%;
    height: calc(100% - 120px);
  }

  #ground {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 120px;
    background: linear-gradient(45deg, #3a7d12, #4caf50);
    box-shadow: inset 0 5px 8px rgba(255,255,255,0.2);
  }

  #scene {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 2000px;
    background: repeating-linear-gradient(
      to right,
      #3a7d12 0 40px,
      #4caf50 40px 80px
    );
  }

  #player {
    position: absolute;
    bottom: 120px;
    left: 60px;
    width: 50px;
    height: 50px;
    background: #ff4d4d;
    border-radius: 12px;
    box-shadow: 0 8px 15px rgba(255, 77, 77, 0.7);
    transition: all 0.2s ease;
    z-index: 2;
  }

  .jump {
    animation: jumpAnim 750ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes jumpAnim {
    0% { transform: translateY(0); }
    40% { transform: translateY(-200px); }
    80% { transform: translateY(0); }
    100% { transform: translateY(0); }
  }

  .obstacle {
    position: absolute;
    bottom: 120px;
    width: 40px;
    height: 60px;
    background: #3f51b5;
    border-radius: 6px;
    box-shadow: 0 5px 10px rgba(63, 81, 181,0.7);
    z-index: 1;
  }

  #controls {
    position: absolute;
    bottom: 0;
    width: 100%;
    background: #2466a7;
    display: flex;
    justify-content: space-around;
    padding: 15px 20px;
    z-index: 3;
  }

  button {
    flex: 1;
    margin: 0 10px;
    background: #48a9f8;
    border: none;
    border-radius: 12px;
    color: white;
    font-weight: 700;
    font-size: 1.3rem;
    padding: 15px 0;
    box-shadow: 0 6px 8px rgba(0,0,0,0.25);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  button:active {
    background-color: #1e6bb8;
    transform: scale(0.95);
  }

  #game-over {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0,0,0,0.9);
    color: white;
    font-size: 2rem;
    padding: 20px 30px;
    border-radius: 20px;
    text-align: center;
    display: none;
    z-index: 4;
    backdrop-filter: blur(3px);
  }

  #score {
    position: absolute;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-size: 1.8rem;
    font-weight: bold;
    text-shadow: 0 2px 4px rgba(0,0,0,0.5);
    z-index: 2;
  }

  @media (max-width: 400px) {
    #game-container {
      width: 100vw;
      height: 100vh;
      border-radius: 0;
    }
    
    button {
      font-size: 1.1rem;
      padding: 12px 0;
    }
  }
</style>
</head>
<body>
<div id="game-container">
  <div id="score">0</div>
  <div id="track">
    <div id="scene"></div>
    <div id="player"></div>
  </div>
  <div id="ground"></div>
  <div id="controls">
    <button id="run-btn">Correr</button>
    <button id="jump-btn">Pular</button>
  </div>
  <div id="game-over">Fim de jogo!<br>Toque para recomeçar</div>
</div>

<script>
(() => {
  const player = document.getElementById('player');
  const runBtn = document.getElementById('run-btn');
  const jumpBtn = document.getElementById('jump-btn');
  const scene = document.getElementById('scene');
  const gameOverEl = document.getElementById('game-over');
  const scoreEl = document.getElementById('score');
  const gameWidth = 350;
  
  let scenePosition = 0;
  let obstacles = [];
  let isJumping = false;
  let gameRunning = true;
  let obstacleSpeed = 4;
  let baseSpawnInterval = 2000;
  let score = 0;
  let lastUpdate = 0;
  let speedMultiplier = 1;

  function updateScore(timestamp) {
    if (!lastUpdate) lastUpdate = timestamp;
    const delta = timestamp - lastUpdate;
    
    if (delta > 1000) {
      score += Math.floor(delta / 100);
      scoreEl.textContent = score;
      lastUpdate = timestamp;
      
      if (score % 500 === 0) {
        obstacleSpeed = Math.min(8, 4 + Math.floor(score / 500));
        baseSpawnInterval = Math.max(1200, 2000 - Math.floor(score / 100));
      }
    }
  }

  function jump() {
    if (!gameRunning || isJumping) return;
    isJumping = true;
    player.classList.add('jump');
    
    setTimeout(() => {
      player.classList.remove('jump');
      isJumping = false;
    }, 750);
  }

  function createObstacle() {
    if (!gameRunning) return;
    
    const obstacle = document.createElement('div');
    obstacle.className = 'obstacle';
    obstacle.style.left = gameWidth + 'px';
    document.getElementById('track').appendChild(obstacle);
    
    obstacles.push({
      element: obstacle,
      x: gameWidth,
      width: 40,
      height: 60
    });
    
    const nextSpawn = baseSpawnInterval * (0.6 + Math.random() * 0.8);
    setTimeout(createObstacle, nextSpawn);
  }

  function moveObstacles() {
    obstacles.forEach((obstacle, index) => {
      obstacle.x -= obstacleSpeed * speedMultiplier;
      obstacle.element.style.left = obstacle.x + 'px';
      
      if (obstacle.x + obstacle.width < 0) {
        obstacle.element.remove();
        obstacles.splice(index, 1);
      }
    });
  }

  function moveBackground() {
    scenePosition -= obstacleSpeed * 0.5 * speedMultiplier;
    scene.style.transform = `translateX(${scenePosition % 80}px)`;
  }

  function checkCollisions() {
    const playerRect = player.getBoundingClientRect();
    
    for (const obstacle of obstacles) {
      const obstacleRect = obstacle.element.getBoundingClientRect();
      
      if (playerRect.right > obstacleRect.left &&
          playerRect.left < obstacleRect.right &&
          playerRect.bottom > obstacleRect.top &&
          playerRect.top < obstacleRect.bottom) {
        endGame();
        break;
      }
    }
  }

  function endGame() {
    gameRunning = false;
    gameOverEl.style.display = 'block';
    speedMultiplier = 0;
    player.style.backgroundColor = '#ff0000';
  }

  function resetGame() {
    gameRunning = true;
    speedMultiplier = 1;
    score = 0;
    lastUpdate = 0;
    obstacleSpeed = 4;
    baseSpawnInterval = 2000;
    player.style.backgroundColor = '#ff4d4d';
    gameOverEl.style.display = 'none';
    scoreEl.textContent = '0';
    
    obstacles.forEach(obstacle => obstacle.element.remove());
    obstacles = [];
    
    createObstacle();
    requestAnimationFrame(gameLoop);
  }

  function gameLoop(timestamp) {
    if (!gameRunning) return;
    
    updateScore(timestamp);
    moveBackground();
    moveObstacles();
    checkCollisions();
    requestAnimationFrame(gameLoop);
  }

  runBtn.addEventListener('click', () => {
    if (!gameRunning) return;
    speedMultiplier = 1.5;
    player.style.transform = 'scale(1.1)';
    setTimeout(() => {
      speedMultiplier = 1;
      player.style.transform = 'scale(1)';
    }, 500);
  });

  jumpBtn.addEventListener('click', jump);
  gameOverEl.addEventListener('click', resetGame);

  document.addEventListener('keydown', (e) => {
    if (e.code === 'Space') jump();
    if (e.code === 'ShiftLeft') runBtn.click();
  });

  createObstacle();
  requestAnimationFrame(gameLoop);
})();
</script>
</body>
</html>